#!/bin/bash

# revdep-rebuild szkript

# Ez a szkript a bemeneti paraméterként megadott fő verziószámban frissített csomag(ok) miatt nagy valószínűséggel működésképtelenné
# váló, ezért újrafordítandó csomagok listáját adja vissza "nyerslista fájlban.
# továbbá a rebuild-rendez hívásával ezek helyes fordítási sorrendjeit a "csomgarend" és "ubrend" fájlokban.
# Az első paraméter szám legyen, mely a felsorolandó csomagok áttételes függési mélységének kívánalma. 


#####################################
# a kiírt fájlok, amit a $pwd -be ír:
#####################################

# nyerslista -- az elkészítendő csomagok építőkő számosság szerint rendezetten, elől a paraméter csomagok
# csomagrend -- Az elkészítendő csomagok listája kívánt elkészülési sorrendben.
# ubrend -- Az elkészítendő csomagok uhubuild szkriptjeinek listája fordítási sorrendben.
# keresztek -- Keresztfüggés esetén az egymástól kölcsönösen függő csomagok listája, csak akkor jön létre, ha találunk ilyet.

##########
# változók
##########

# csomaglista	- a rendezetlen csomaghalmaz
# csomagdarab	- a csomaghalmaz elemeinek száma
# csomagtag	- ciklusváltozó, a csomaghalmaz aktuális eleme
# depend	- egy adott csomag építőköveinek halmaza
# ujlista	- ideiglenes változó egy új lista létrehozására

##########
# Hajrá! #
##########

# jó paraméter kell a szkriptnek
melyseg=$(echo $1 | bc)
if [ "$melyseg" == "0" ] || [ ! "$2" ]; then
	echo 'Használat: revdep-rebuild <mélység> <csomag> [csomag]...)!' >&2
	exit 1
fi

# Esetlegesen létező fájlok eltávolítása
rm -f nyerslista

# mélységi paraméter kiszedése a paraméterlistából
parancslista=""
for num in "$@" ; do
  if [ ! $num == $1 ]; then
  parancslista=$(echo -e "$parancslista"'\n'"$num")
  fi
done

# A bemeneti paraméter(ek) alapján a fordítandó csomagok ABC sorbarendezett, duplikátumok nélküli stringjének legyártása
echo $melyseg' mélységű függésben lesznek a listák elkészítve'
csomaglista="$parancslista"
#mélység szerint a csomagtenger növelése
ujlista=$(csomagfi $csomaglista | sort -u)
csomaglista="$ujlista"
melyseg=$(echo $melyseg'-1' | bc)
while [ ! "$melyseg" == "0" ]; do
  ujlista=$(csomagfi $csomaglista | sort -u)
  tmplista="$csomaglista"
  csomaglista=$(echo -e "$tmplista"'\n'"$ujlista" | sort -u)
  melyseg=$(echo $melyseg'-1' | bc)
done

# Értesítés
echo ---------
echo "$(echo ${csomaglista} | wc -w)" ' darab csomag van, mely a megadott csomag(ok)ból építkezik'
echo 'és ezek verziószámához ">=", vagy "="  módon ragaszkodnak'
echo
echo "Ezek előzetes rendezése építőkő számosság szerint, közben közülük a paraméter csomagok esetleges előfordulásainak eltávolítása"
echo ---------

# esetleges paraméter csomagok előfordulásainak eltávolítása a listából
for i in $parancslista ;do
ujlista=""
for csomagtag in $csomaglista; do
  if [ ! "$csomagtag" == "$i" ]; then
    ujlista=$(echo -e "$csomagtag"'\n'"$ujlista")
  fi
done
csomaglista=$ujlista
done
# Előzetes rendezés az egyes csomagok építőköveinek számossága szerint növekedőn. Legelől lesznek a legkevesebb csomagból építkezők.
ujlista=""
for csomagtag in $csomaglista; do
    depend=$(csomagko "$csomagtag")
    depdarab=$(echo "$depend" | wc -w)
    ujlista=$(echo -e "$depdarab"xxyyzz"$csomagtag"'\n'"$ujlista")
done
csomaglista=$(echo "$ujlista" | sort -V | sed s/\[0-9]*xxyyzz//g)

# a paraméter csomagoknak a lista elejére történő elhelyezése
for num in $parancslista; do
csomaglista=$(echo -e "$num"'\n'"$csomaglista")
done
echo "$csomaglista" >>nyerslista
#for i in $csomaglista; do
#  echo $i >> nyerslista
#done

# Értesítés
echo "$(echo ${csomaglista} | wc -w)" " csomag előzetes rendezése kész"
rebuild-rendez "$csomaglista"
